import requests
from celery import shared_task
from django.conf import settings

from app_kiberclub.models import Client, AppUser
from django.utils import timezone
import logging
from app_api.alfa_crm_service.crm_service import get_taught_trial_lesson
from datetime import datetime, timedelta
from app_api.tasks.check_clients_balance_and_notify import send_telegram_message

logger = logging.getLogger(__name__)


@shared_task
def check_client_trial_lessons():
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö AppUser –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Ö –∫–ª–∏–µ–Ω—Ç–∞ (Client) –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø—Ä–∏–∑–Ω–∞–∫–æ–º –ø–æ—Å–µ—â–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –≤—á–µ—Ä–∞.
    """
    logger.info("–°—Ç–∞—Ä—Ç –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–±–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    results = []

    users_qs = AppUser.objects.prefetch_related("clients__branch").all()

    for user in users_qs:
        user_clients = user.clients.all()
        for client in user_clients:
            client_crm_id = client.crm_id
            branch_id = None
            try:
                branch_id = int(client.branch.branch_id) if client.branch and client.branch.branch_id else None
            except Exception:
                branch_id = None

            if not client_crm_id or not branch_id:
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ crm_id/branch_id: user={user.id} client={client.id}")
                results.append({
                    "user_id": user.id,
                    "telegram_id": user.telegram_id,
                    "client_id": client.id,
                    "client_crm_id": client_crm_id,
                    "branch_id": branch_id,
                    "attended_yesterday_trial": False,
                    "checked": False,
                })
                continue

            try:
                lessons_response = get_taught_trial_lesson(customer_id=client_crm_id, branch_id=branch_id)
                items = []
                if lessons_response is not None:
                    try:
                        # –§—É–Ω–∫—Ü–∏—è get_taught_trial_lesson —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞
                        items = lessons_response.get("items", []) or []
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ CRM –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_crm_id}: {e}")

                attended = check_attend_on_lesson(items) if items else False

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ —É—Ä–æ–∫–∞
                if attended:
                    if user.telegram_id:
                        message = (
                            "üîî –ü—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –ø–æ—Å–µ—â–µ–Ω–æ\n\n"
                            f"–†–µ–±—ë–Ω–æ–∫: {client.name or '–ö–ª–∏–µ–Ω—Ç'}\n"
                            f"–î–∞—Ç–∞: {(datetime.now() - timedelta(days=1)).strftime('%d.%m.%Y')}\n\n"
                            "–ï—Å–ª–∏ –≤—Å—ë –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –±–æ—Ç–µ –ú–µ–Ω—é -> RENDERIA –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ.\n"
                            "–í–∞—à–∞ RENDERIA!"
                        )
                        try:
                            send_telegram_message(user.telegram_id, message)
                            logger.info(
                                f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–Ω–æ–º –∑–∞–Ω—è—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id} (client_id={client.id})"
                            )
                        except Exception as e:
                            logger.error(
                                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–Ω–æ–º –∑–∞–Ω—è—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}"
                            )
                    else:
                        logger.info(
                            f"–ü—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={user.id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram_id"
                        )

                results.append({
                    "user_id": user.id,
                    "telegram_id": user.telegram_id,
                    "client_id": client.id,
                    "client_crm_id": client_crm_id,
                    "branch_id": branch_id,
                    "attended_yesterday_trial": attended,
                    "checked": True,
                })

                logger.info(f"user={user.id} client_crm_id={client_crm_id} attended_yesterday_trial={attended}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–±–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_crm_id} (user={user.id}): {e}")
                results.append({
                    "user_id": user.id,
                    "telegram_id": user.telegram_id,
                    "client_id": client.id,
                    "client_crm_id": client_crm_id,
                    "branch_id": branch_id,
                    "attended_yesterday_trial": False,
                    "checked": False,
                    "error": str(e),
                })

    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    return results


def check_attend_on_lesson(lessons):
    for lesson in lessons:
        details = lesson.get("details") or []
        if not details:
            continue
        lesson_details = details[0]
        is_attend = lesson_details.get("is_attend", False)
        date_str = lesson.get("date")
        if not date_str:
            continue
        if date_str == str(datetime.now().date() - timedelta(1)) and is_attend:
            return True

    return False
